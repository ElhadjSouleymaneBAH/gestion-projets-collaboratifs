package be.iccbxl.gestionprojets.repository;

import be.iccbxl.gestionprojets.model.Abonnement;
import be.iccbxl.gestionprojets.model.Utilisateur;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

/**
 * Repository pour les abonnements.
 * Support F10 : Paiements et abonnements.
 *
 * @author ElhadjSouleymaneBAH
 */
@Repository
public interface AbonnementRepository extends JpaRepository<Abonnement, Long> {

    /**
     * Trouve l'abonnement d'un utilisateur par objet Utilisateur.
     *
     * @param utilisateur L'objet Utilisateur
     * @return Optional contenant l'abonnement si trouv√©
     */
    Optional<Abonnement> findByUtilisateur(Utilisateur utilisateur);

    /**
     * Trouve l'abonnement d'un utilisateur par ID utilisateur (SANS charger l'utilisateur).
     *
     * ‚ö†Ô∏è ATTENTION : Causera LazyInitializationException si on acc√®de √† getUtilisateur()
     * en dehors d'une transaction (par exemple dans un contr√¥leur lors de la conversion en DTO).
     *
     * Solution : Utiliser findByUtilisateurIdWithUtilisateur() dans les contr√¥leurs.
     *
     * @param utilisateurId L'ID de l'utilisateur
     * @return Optional contenant l'abonnement si trouv√©
     */
    Optional<Abonnement> findByUtilisateurId(Long utilisateurId);

    /**
     * üîß M√âTHODE PRINCIPALE : Trouve l'abonnement d'un utilisateur AVEC l'utilisateur charg√©.
     *
     * Utilise JOIN FETCH pour charger l'utilisateur en une seule requ√™te et √©viter
     * LazyInitializationException lors de la conversion en DTO.
     *
     * Conforme aux exigences non fonctionnelles du cahier des charges :
     * - Performance : √©vite le probl√®me N+1 (temps de r√©ponse < 2s)
     * - Maintenance : bonnes pratiques (pattern eager loading explicite)
     *
     * √Ä UTILISER dans les contr√¥leurs pour la conversion en DTO.
     *
     * @param utilisateurId L'ID de l'utilisateur
     * @return Optional contenant l'abonnement avec utilisateur charg√©
     */
    @Query("SELECT a FROM Abonnement a LEFT JOIN FETCH a.utilisateur u WHERE u.id = :utilisateurId")
    Optional<Abonnement> findByUtilisateurIdWithUtilisateur(@Param("utilisateurId") Long utilisateurId);

    /**
     * üîß NOUVELLE M√âTHODE : Trouve un abonnement par ID AVEC l'utilisateur charg√©.
     *
     * Utilise JOIN FETCH pour charger l'utilisateur en une seule requ√™te.
     * Utilis√©e dans renouvelerAbonnement(), resilierAbonnement() et reactiverAbonnement()
     * pour √©viter LazyInitializationException.
     *
     * Conforme aux exigences non fonctionnelles :
     * - Performance : une seule requ√™te SQL au lieu de deux
     * - S√©curit√© : √©vite les erreurs runtime
     *
     * @param id L'ID de l'abonnement
     * @return Optional contenant l'abonnement avec utilisateur charg√©
     */
    @Query("SELECT a FROM Abonnement a LEFT JOIN FETCH a.utilisateur WHERE a.id = :id")
    Optional<Abonnement> findByIdWithUtilisateur(@Param("id") Long id);

    /**
     * V√©rifie si un utilisateur a un abonnement par son ID.
     *
     * Utilis√© pour v√©rifier rapidement l'existence d'un abonnement sans le charger.
     *
     * @param utilisateurId L'ID de l'utilisateur
     * @return true si l'utilisateur a un abonnement, false sinon
     */
    boolean existsByUtilisateurId(Long utilisateurId);

    /**
     * Trouve tous les abonnements par nom.
     *
     * @param nom Le nom de l'abonnement (ex: "Plan Premium Mensuel")
     * @return Liste des abonnements correspondants
     */
    List<Abonnement> findByNom(String nom);

    /**
     * Compte les abonnements par utilisateur ID.
     *
     * Utilis√© pour v√©rifier si un utilisateur a d√©j√† souscrit plusieurs fois.
     *
     * @param utilisateurId L'ID de l'utilisateur
     * @return Nombre d'abonnements de l'utilisateur
     */
    long countByUtilisateurId(Long utilisateurId);

    /**
     * üîß M√âTHODE PRINCIPALE : Charge TOUS les abonnements AVEC leurs utilisateurs.
     *
     * Utilise JOIN FETCH pour √©viter :
     * - Le probl√®me N+1 (une requ√™te par abonnement pour charger l'utilisateur)
     * - Les LazyInitializationException
     * - L'affichage "Inconnu" dans le frontend
     *
     * Conforme aux exigences non fonctionnelles :
     * - Performance : une seule requ√™te SQL au lieu de N+1
     * - Maintenance : code pr√©visible et sans erreurs runtime
     *
     * √Ä UTILISER dans le contr√¥leur admin pour lister tous les abonnements (F10 Admin).
     *
     * @return Liste de tous les abonnements avec leurs utilisateurs charg√©s
     */
    @Query("SELECT a FROM Abonnement a LEFT JOIN FETCH a.utilisateur")
    List<Abonnement> findAllWithUtilisateurs();
}